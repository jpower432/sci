// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package layer4

// EvaluationPlan defines how a set of Layer 2 controls are to be evaluated.
type EvaluationPlan struct {
	Metadata	Metadata	`json:"metadata" yaml:"metadata"`

	Plans	[]struct {
		// Control points to the Layer 2 control being evaluated.
		Control	Mapping	`json:"control"`

		// Assessments defines possible testing procedures to evaluate the control.
		//
		// Enforce that control reference and the assessments' references match
		// This formulation uses the control's reference if the assessment doesn't include a reference
		Assessments	[]Assessment	`json:"assessments"`
	}	`json:"plans" yaml:"plans"`

	// Executors defines the assessment executors that can be used to execute assessment procedures.
	Executors	[]AssessmentExecutor	`json:"executors,omitempty" yaml:"executors,omitempty"`
}

// Metadata contains metadata about the Layer 4 evaluation plan and log.
type Metadata struct {
	Id	string	`json:"id" yaml:"id"`

	Version	string	`json:"version,omitempty" yaml:"version,omitempty"`

	Author	Author	`json:"author" yaml:"author"`

	MappingReferences	[]MappingReference	`json:"mapping-references,omitempty" yaml:"mapping-references,omitempty"`
}

// Author contains the information about the entity that produced the evaluation plan or log.
type Author struct {
	Name	string	`json:"name" yaml:"name"`

	Uri	string	`json:"uri,omitempty" yaml:"uri,omitempty"`

	Version	string	`json:"version,omitempty" yaml:"version,omitempty"`

	Contact	Contact	`json:"contact,omitempty" yaml:"contact,omitempty"`
}

type Contact struct {
	// The contact person's name.
	Name	string	`json:"name" yaml:"name"`

	// Indicates whether this admin is the first point of contact for inquiries. Only one entry should be marked as primary.
	Primary	bool	`json:"primary" yaml:"primary"`

	// The entity with which the contact is affiliated, such as a school or employer.
	Affiliation	*string	`json:"affiliation,omitempty" yaml:"affiliation,omitempty"`

	// A preferred email address to reach the contact.
	Email	*Email	`json:"email,omitempty" yaml:"email,omitempty"`

	// A social media handle or profile for the contact.
	Social	*string	`json:"social,omitempty" yaml:"social,omitempty"`
}

type MappingReference struct {
	Id	string	`json:"id" yaml:"id"`

	Title	string	`json:"title" yaml:"title"`

	Version	string	`json:"version" yaml:"version"`

	Description	string	`json:"description,omitempty" yaml:"description,omitempty"`

	Url	string	`json:"url,omitempty" yaml:"url,omitempty"`
}

type Mapping struct {
	// ReferenceId should reference the corresponding MappingReference id
	ReferenceId	string	`json:"reference-id" yaml:"reference-id"`

	// EntryId should reference the specific element within the referenced document
	EntryId	string	`json:"entry-id" yaml:"entry-id"`

	// Strength describes how effectively the referenced item addresses the associated control or procedure on a scale of 1 to 10, with 10 being the most effective.
	Strength	int64	`json:"strength,omitempty" yaml:"strength,omitempty"`

	// Remarks provides additional context about the mapping entry.
	Remarks	string	`json:"remarks,omitempty" yaml:"remarks,omitempty"`
}

// AssessmentExecutor describes an assessment method (tool or manual approach) that can be used to execute assessment procedures.
type AssessmentExecutor struct {
	// Id uniquely identifies the assessment method.
	Id	string	`json:"id" yaml:"id"`

	// Name provides the name of the assessment method.
	Name	string	`json:"name" yaml:"name"`

	// Type specifies whether the executor is automated or manual.
	// Automated executors are tools or scripts that run without human intervention.
	// Manual executors require human review or judgment.
	Type	string	`json:"type" yaml:"type"`

	// Version specifies the version of the assessment method (if applicable, e.g., for tools).
	Version	string	`json:"version,omitempty" yaml:"version,omitempty"`

	// Description provides additional context about the assessment method.
	Description	string	`json:"description,omitempty" yaml:"description,omitempty"`

	// Documentation provides a URL to documentation for the assessment method.
	Documentation	string	`json:"documentation,omitempty" yaml:"documentation,omitempty"`
}

// EvaluationLog contains the results of evaluating a set of Layer 2 controls.
type EvaluationLog struct {
	Evaluations	[]*ControlEvaluation	`json:"evaluations" yaml:"evaluations"`

	Metadata	Metadata	`json:"metadata,omitempty" yaml:"metadata,omitempty"`
}

// ControlEvaluation contains the results of evaluating a single Layer 4 control.
type ControlEvaluation struct {
	Name	string	`json:"name" yaml:"name"`

	Result	Result	`json:"result" yaml:"result"`

	Message	string	`json:"message" yaml:"message"`

	Control	Mapping	`json:"control" yaml:"control"`

	// Enforce that control reference and the assessments' references match
	// This formulation uses the control's reference if the assessment doesn't include a reference
	AssessmentLogs	[]*AssessmentLog	`json:"assessment-logs" yaml:"assessment-logs"`
}

// AssessmentLog contains the results of executing a single assessment procedure for a control requirement.
type AssessmentLog struct {
	// Requirement should map to the assessment requirement for this assessment.
	Requirement	Mapping	`json:"requirement" yaml:"requirement"`

	// Procedure should map to the assessment procedure being executed.
	Procedure	Mapping	`json:"procedure" yaml:"procedure"`

	// Description provides a summary of the assessment procedure.
	Description	string	`json:"description" yaml:"description"`

	// Result is the overall outcome of the assessment procedure, matching the result of the last step that was run.
	Result	Result	`json:"result" yaml:"result"`

	// Message provides additional context about the assessment result.
	Message	string	`json:"message" yaml:"message"`

	// Applicability is elevated from the Layer 2 Assessment Requirement to aid in execution and reporting.
	Applicability	[]string	`json:"applicability" yaml:"applicability"`

	// Steps are sequential actions taken as part of the assessment, which may halt the assessment if a failure occurs.
	Steps	[]AssessmentStep	`json:"steps" yaml:"steps"`

	// Steps-executed is the number of steps that were executed as part of the assessment.
	StepsExecuted	int64	`json:"steps-executed,omitempty" yaml:"steps-executed,omitempty"`

	// Start is the timestamp when the assessment began.
	Start	Datetime	`json:"start" yaml:"start"`

	// End is the timestamp when the assessment concluded.
	End	Datetime	`json:"end,omitempty" yaml:"end,omitempty"`

	// Recommendation provides guidance on how to address a failed assessment.
	Recommendation	string	`json:"recommendation,omitempty" yaml:"recommendation,omitempty"`
}

type Datetime string

// AssessmentPlan defines all testing procedures for a control id.
type AssessmentPlan struct {
	// Control points to the Layer 2 control being evaluated.
	Control	Mapping	`json:"control" yaml:"control"`

	// Assessments defines possible testing procedures to evaluate the control.
	//
	// Enforce that control reference and the assessments' references match
	// This formulation uses the control's reference if the assessment doesn't include a reference
	Assessments	[]Assessment	`json:"assessments" yaml:"assessments"`
}

// Assessment defines all testing procedures for a requirement.
type Assessment struct {
	// RequirementId points to the requirement being tested.
	Requirement	Mapping	`json:"requirement" yaml:"requirement"`

	// Procedures defines possible testing procedures to evaluate the requirement.
	Procedures	[]AssessmentProcedure	`json:"procedures" yaml:"procedures"`

	// Strategy defines the rules for aggregating results from multiple procedures.
	// This is used when multiple procedures exist for the same requirement and their results conflict.
	Strategy	Strategy	`json:"strategy,omitempty" yaml:"strategy,omitempty"`
}

// AssessmentProcedure describes a testing procedure for evaluating a Layer 2 control requirement.
type AssessmentProcedure struct {
	// Id uniquely identifies the assessment procedure being executed
	Id	string	`json:"id" yaml:"id"`

	// Name provides a summary of the procedure
	Name	string	`json:"name" yaml:"name"`

	// Description provides a detailed explanation of the procedure
	Description	string	`json:"description" yaml:"description"`

	// Documentation provides a URL to documentation that describes how the assessment procedure evaluates the control requirement
	Documentation	string	`json:"documentation,omitempty" yaml:"documentation,omitempty"`

	// Executors lists which assessment executors can execute this procedure, along with their trust scores for this specific procedure.
	// Multiple executors indicate that different tools can perform the same check (e.g., PVTR and Scorecard both checking branch protection).
	Executors	[]ExecutorMapping	`json:"executors" yaml:"executors"`

	// Strategy defines the rules for aggregating results from multiple executors running the same procedure.
	Strategy	Strategy	`json:"strategy,omitempty" yaml:"strategy,omitempty"`
}

// ExecutorMapping maps an assessment executor to a procedure with a trust score.
type ExecutorMapping struct {
	Id	string	`json:"id" yaml:"id"`

	// TrustScore is the numerical weight assigned to this method-procedure combination on a scale of 1 to 10, with 10 being the most trusted.
	TrustScore	int64	`json:"trust-score" yaml:"trust-score"`

	// Remarks provides context about why this executor-procedure combination
	Remarks	string	`json:"remarks,omitempty" yaml:"remarks,omitempty"`
}

// Strategy defines the rules for resolving conflicts between multiple execution agents.
// ConflictRuleType specifies the type of aggregation logic used to resolve conflicts
// when multiple executors provide results for the same assessment procedure.
type Strategy struct {
	// WeightedScore uses trust scores from executor mappings to compute a weighted
	// average of results, giving more weight to executors with higher trust scores.
	// Strict indicates that if any executor reports a failure, the overall
	// procedure result is failed, regardless of other executor results.
	// ManualOverride gives precedence to manual review executors over automated
	// executors when results conflict.
	ConflictRuleType	string	`json:"conflict-rule-type" yaml:"conflict-rule-type"`

	// Remarks provides context for why this specific conflict resolution strategy was chosen.
	Remarks	string	`json:"remarks,omitempty" yaml:"remarks,omitempty"`
}

type Email string
