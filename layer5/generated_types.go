// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package schemas

// #EnforcementAction defines an auditable record of policy enforcement.
type EnforcementAction struct {
	Metadata	Metadata	`json:"metadata" yaml:"metadata"`

	// Executed indicates whether the enforcement action was successfully executed.
	Executed	bool	`json:"executed" yaml:"executed"`

	// ExecutedAt defines when the enforcement action was executed.
	ExecutedAt	Datetime	`json:"executed-at" yaml:"executed-at"`

	// Message defines a brief description of what enforcement action was actually taken.
	Message	string	`json:"message,omitempty" yaml:"message,omitempty"`

	// Target defines the subject of the enforcement action.
	Target	Target	`json:"target,omitempty" yaml:"target,omitempty"`

	// Action defines the high-level action performed during enforcement.
	Action	Action	`json:"action" yaml:"action"`

	// PrimaryControl defines the primary Layer 2 control being enforced.
	Control	Mapping	`json:"control" yaml:"control"`

	// Findings defines Layer 4 AssessmentLog outcomes that triggered this enforcement action.
	Findings	[]Finding	`json:"findings,omitempty" yaml:"findings,omitempty"`

	// Exception defines an optional exception that may apply to this finding.
	Exception	Exception	`json:"exception,omitempty" yaml:"exception,omitempty"`

	// RemediationPlan uniquely identifies the remediation response when the Layer 3 Enforcement
	// Method is AutoRemediation.
	RemediationPlanId	string	`json:"remediation-plan,omitempty" yaml:"remediation-plan,omitempty"`

	// NotificationPlan uniquely identifies the notification response when the Layer 3 Enforcement
	// Method is Manual Remediation.
	NotificationPlan	string	`json:"notification-plan,omitempty" yaml:"notification-plan,omitempty"`

	// EnforcementPlan uniquely identifies the enforcement response when the Layer 3 Enforcement
	// Method is Deployment Gate.
	EnforcementPlan	string	`json:"enforcement-plan,omitempty" yaml:"enforcement-plan,omitempty"`
}

// Metadata contains metadata about the Layer 5 Enforcement Action.
type Metadata struct {
	// Id defines the unique identifier for the metadata record.
	Id	string	`json:"id" yaml:"id"`

	// Version defines the version of the metadata schema.
	Version	string	`json:"version,omitempty" yaml:"version,omitempty"`

	// Author defines the entity that produced the enforcement action.
	Author	Author	`json:"author" yaml:"author"`

	// MappingReferences defines references to external standards, frameworks, or documents.
	MappingReferences	[]MappingReference	`json:"mapping-references,omitempty" yaml:"mapping-references,omitempty"`
}

// Author contains the information about the entity that produced the evaluation plan or log.
type Author struct {
	// Name defines the name of the author.
	Name	string	`json:"name" yaml:"name"`

	// Uri defines a URI for the author.
	Uri	string	`json:"uri,omitempty" yaml:"uri,omitempty"`

	// Version defines the version of the authoring entity.
	Version	string	`json:"version,omitempty" yaml:"version,omitempty"`

	// Contact defines contact information for the author.
	Contact	Contact	`json:"contact,omitempty" yaml:"contact,omitempty"`
}

// Contact represents contact information for a person.
type Contact struct {
	// Name defines the contact person's name.
	Name	string	`json:"name" yaml:"name"`

	// Primary indicates whether this contact is the first point of contact for inquiries. Only one entry should be marked as primary.
	Primary	bool	`json:"primary" yaml:"primary"`

	// Affiliation defines the entity with which the contact is affiliated, such as a school or employer.
	Affiliation	*string	`json:"affiliation,omitempty" yaml:"affiliation,omitempty"`

	// Email defines a preferred email address to reach the contact.
	Email	*Email	`json:"email,omitempty" yaml:"email,omitempty"`

	// Social defines a social media handle or profile for the contact.
	Social	*string	`json:"social,omitempty" yaml:"social,omitempty"`
}

// MappingReference provides references to external standards, frameworks, or documents.
type MappingReference struct {
	// Id defines the unique identifier for the referenced document or standard.
	Id	string	`json:"id" yaml:"id"`

	// Title defines a human-readable title of the referenced document.
	Title	string	`json:"title" yaml:"title"`

	// Version defines the version of the referenced document.
	Version	string	`json:"version" yaml:"version"`

	// Description defines an optional description of the referenced document.
	Description	string	`json:"description,omitempty" yaml:"description,omitempty"`

	// Url defines an optional URL to access the referenced document (must be valid HTTP/HTTPS URL).
	Url	string	`json:"url,omitempty" yaml:"url,omitempty"`
}

// Datetime represents a timestamp in ISO 8601 format with timezone.
type Datetime string

// Target defines the subject of the enforcement action.
type Target struct {
	// TargetId uniquely identifies the specific target instance.
	TargetId	string	`json:"target-id" yaml:"target-id"`

	// TargetName defines a human-readable name of the target.
	TargetName	string	`json:"target-name" yaml:"target-name"`

	// TargetType defines the type or category of the target.
	TargetType	string	`json:"target-type" yaml:"target-type"`

	// Environment defines the environment where the target exists.
	Environment	string	`json:"environment,omitempty" yaml:"environment,omitempty"`
}

// Action is the high-level enforcement outcome.
type Action string

// Mapping represents a mapping between internal controls and external standards.
type Mapping struct {
	// ReferenceId defines the corresponding MappingReference id.
	ReferenceId	string	`json:"reference-id" yaml:"reference-id"`

	// EntryId defines the specific element within the referenced document.
	EntryId	string	`json:"entry-id" yaml:"entry-id"`

	// Strength defines how effectively the referenced item addresses the associated control or procedure on a scale of 1 to 10, with 10 being the most effective.
	Strength	int64	`json:"strength,omitempty" yaml:"strength,omitempty"`

	// Remarks defines additional context about the mapping entry.
	Remarks	string	`json:"remarks,omitempty" yaml:"remarks,omitempty"`
}

// Finding is a self-contained record of a detected issue.
type Finding struct {
	// Requirement defines the specific requirement that was evaluated.
	Requirement	Mapping	`json:"requirement" yaml:"requirement"`

	// Result defines the result of evaluating this requirement.
	Result	Result	`json:"result" yaml:"result"`

	// Message defines a human-readable description of what was found.
	Message	string	`json:"message" yaml:"message"`
}

// Result is the outcome of the assessment.
type Result string

// Exception represents an approved exception to policy enforcement.
type Exception struct {
	// Id defines the unique identifier for this exception.
	Id	string	`json:"id" yaml:"id"`

	// ApprovedBy defines the person or entity who approved this exception.
	ApprovedBy	Contact	`json:"approved-by" yaml:"approved-by"`

	// ApprovalDate defines the date and time when the exception was approved.
	ApprovalDate	Datetime	`json:"approval-date" yaml:"approval-date"`

	// ExpirationDate defines the optional date when this exception expires.
	ExpirationDate	Datetime	`json:"expiration-date,omitempty" yaml:"expiration-date,omitempty"`

	// Justification defines the justification for why this exception is necessary.
	Justification	string	`json:"justification" yaml:"justification"`

	// RiskLevel defines the risk level associated with this exception.
	RiskLevel	RiskLevel	`json:"risk-level" yaml:"risk-level"`

	// CompensatingControls defines an optional list of compensating controls implemented to mitigate risk.
	CompensatingControls	[]Mapping	`json:"compensating-controls,omitempty" yaml:"compensating-controls,omitempty"`

	// ReviewDate defines the optional date when this exception should be reviewed.
	ReviewDate	Datetime	`json:"review-date,omitempty" yaml:"review-date,omitempty"`
}

// RiskLevel from Layer 3 (Policy layer)
type RiskLevel string

// Email represents a valid email address format.
type Email string
