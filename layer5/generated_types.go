// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package layer5

import "github.com/ossf/gemara/layer4"

// #EnforcementAction is the central, auditable record of policy enforcement.
type EnforcementAction struct {
	Id	string	`json:"id" yaml:"id"`

	Timestamp	Datetime	`json:"timestamp" yaml:"timestamp"`

	Target	Target	`json:"target" yaml:"target"`

	Decision	Decision	`json:"decision" yaml:"decision"`

	Finding	Finding	`json:"finding" yaml:"finding"`

	RemediationPlanId	string	`json:"remediation-plan-id,omitempty" yaml:"remediation-plan-id,omitempty"`
}

type Datetime string

// #Target defines the subject of the enforcement action.
type Target struct {
	TargetName	string	`json:"target-name" yaml:"target-name"`

	TargetType	string	`json:"target-type" yaml:"target-type"`

	TargetId	string	`json:"target-id,omitempty" yaml:"target-id,omitempty"`
}

// #Decision is the high-level enforcement outcome.
type Decision string

// #Finding is a self-contained record of a detected issue.
type Finding struct {
	RequirementId	string	`json:"requirement-id" yaml:"requirement-id"`

	Result	layer4.Result	`json:"result" yaml:"result"`

	Message	string	`json:"message" yaml:"message"`
}

type RemediationPlan struct {
	Id	string	`json:"id" yaml:"id"`

	Target	string	`json:"target" yaml:"target"`

	EnforcementId	string	`json:"enforcement-id" yaml:"enforcement-id"`

	Steps	[]RemediationStep	`json:"steps" yaml:"steps"`
}

type RemediationStep struct {
	Id	string	`json:"id" yaml:"id"`

	Name	string	`json:"name" yaml:"name"`

	Parameters	map[string]any/* CUE top */ `json:"parameters,omitempty" yaml:"parameters,omitempty"`

	Reason	string	`json:"reason" yaml:"reason"`

	Status	string	`json:"status,omitempty" yaml:"status,omitempty"`

	Error	string	`json:"error,omitempty" yaml:"error,omitempty"`
}
