// Code generated by "cue exp gengotypes"; DO NOT EDIT.

package layer1

type GuidanceDocument struct {
	Metadata Metadata `json:"metadata,omitempty"`

	// Introductory text for the document to be used during rendering
	FrontMatter string `json:"front-matter,omitempty"`

	Categories []Category `json:"categories,omitempty"`

	// For inheriting from other guidance documents to create tailored documents/baselines
	SharedGuidelines []Mapping `json:"shared-guidelines,omitempty"`

	SharedPrinciples []Mapping `json:"shared-principles,omitempty"`
}

type Metadata struct {
	Id string `json:"id"`

	Title string `json:"title"`

	Description string `json:"description"`

	Author string `json:"author"`

	Version string `json:"version,omitempty"`

	LastModified string `json:"last-modified,omitempty"`

	PublicationDate string `json:"publication-date,omitempty"`

	MappingReferences []MappingReference `json:"mapping-references,omitempty"`

	// References to external resources not represented in a structured format.
	Resources []ResourceReference `json:"resources,omitempty"`

	DocumentType DocumentType `json:"document-type,omitempty"`

	Applicabilty *Applicability `json:"applicability,omitempty"`

	Exemptions []string `json:"exemptions,omitempty"`
}

// Mapping references is the same from Layer2, but intended for Layer 1 to Layer 1 mappings
// instead of Layer 2 to Layer 1 mappings.
type MappingReference struct {
	Id string `json:"id"`

	Title string `json:"title"`

	Version string `json:"version"`

	Description string `json:"description,omitempty"`

	Url string `json:"url,omitempty"`
}

// ResourceReferences defines a references to an external document (possibly unstructured)
type ResourceReference struct {
	Id string `json:"id"`

	Title string `json:"title"`

	Description string `json:"description"`

	Url string `json:"url,omitempty"`

	IssuingBody string `json:"issuing-body,omitempty"`

	PublicationDate string `json:"publication-date,omitempty"`
}

type DocumentType string

type Applicability struct {
	// Inclusion by geographical or legal areas
	Jurisdictions []string `json:"jurisdictions,omitempty"`

	// Inclusion by types of technology or technological environments
	TechnologyDomains []string `json:"technology-domains,omitempty"`

	// Inclusion by industry sectors or verticals
	IndustrySectors []string `json:"industry-sectors,omitempty"`
}

// Category represents a logical group of guidelines (i.e. control family)
type Category struct {
	Id string `json:"id"`

	Title string `json:"title"`

	Description string `json:"description"`

	Guidelines []Guideline `json:"guidelines,omitempty"`
}

type Guideline struct {
	Id string `json:"id"`

	Title string `json:"title"`

	Objective string `json:"objective,omitempty"`

	// Maps to fields commonly seen in controls with implementation guidance
	Recommendations []string `json:"recommendations,omitempty"`

	// For control enhancements (ex. AC-2(1) in 800-53)
	// The base-guideline-id is needed to achieve full context for the enhancement
	BaseGuidelineID string `json:"base-guideline-id,omitempty"`

	Rationale *Rationale `json:"rationale,omitempty"`

	// Represents individual guideline parts/statements
	GuidelineParts []Part `json:"guideline-parts,omitempty"`

	// Crosswalking this guideline to other guidelines in other documents
	GuidelineMappings []Mapping `json:"guideline-mappings,omitempty"`

	// A list for associated key principle ids
	PrincipleMappings []Mapping `json:"principle-mappings,omitempty"`

	// This is akin to related controls, but using more explicit terminology
	SeeAlso []string `json:"see-also,omitempty"`

	// Corresponds to the resource ids in metadata to map to external unstructured resources
	ExternalReferences []string `json:"external-references,omitempty"`
}

// Rationale provides contextual information to help with development and understanding of
// guideline intent.
type Rationale struct {
	// Negative results expected from the guideline's lack of implementation
	Risks []Risk `json:"risks"`

	// Positive results expected from the guideline's implementation
	Outcomes []Outcome `json:"outcomes"`
}

type Risk struct {
	Title string `json:"title"`

	Description string `json:"description"`
}

type Outcome struct {
	Title string `json:"title"`

	Description string `json:"description"`
}

// Parts include sub-statements of a guideline that can be assessed individually
type Part struct {
	Id string `json:"id"`

	Title string `json:"title,omitempty"`

	Prose string `json:"prose"`

	Recommendations []string `json:"recommendations,omitempty"`
}

type Mapping struct {
	ReferenceId string `json:"reference-id"`

	Identifiers []string `json:"identifiers"`

	// Adding context about this particular mapping and why it was mapped.
	Remarks string `json:"remarks,omitempty"`
}
